names_to = "Tipo_de_registro",
values_to = "Conteo") %>%
# Separar columnas
separate(col = "Tipo_de_registro", into = c("Tipo", "Pais"), sep = "_") %>%
# Corregir nombres de paises, codificar factor, pasar a formato date
mutate(Pais = recode(Pais, "EEUU" = "EstadosUnidos", "Ginea" = "Guinea", "Senega" = "Senegal"),
Categ_Revision = factor(Categ_Revision, levels = 1:3, labels = c("Confirmado", "Pendiente", "No solicitado")),
Fecha = dmy(Fecha)
) %>%
# Renombrar columnas
rename(Recepcion = Fecha, Revision = Categ_Revision) %>%
# Filtrar filas para eliminar NAs
filter(!is.na(Conteo)) %>%
# Crear columnas separadas para casos y muertes
pivot_wider(id_cols = c(Recepcion, Pais), names_from = Tipo, values_from = Conteo) %>%
# Crear nuevas variables
mutate(Continente = case_when(Pais == "EstadosUnidos" ~ "America",
Pais == "España" ~ "Europa",
TRUE ~ "Africa"),
Situacion = case_when(Casos >= 30 & Muertes >= 30 ~ "alarmante",
Casos < 30 & Muertes >= 30 ~ "grave",
Casos >= 30 & Muertes < 30 ~ "delicada",
Casos < 30 & Muertes < 30 ~ "estable")
)
all.equal(datos, datosPipa)
View(datosPipa)
write_delim(datosPipa, file = "datosOrdenados_ebola.txt", delim = "/t")
write_delim(datosPipa, file = "C:/Users/Fernando Ramos/Dropbox/Personal/Universidad Austral/Cursos/Introducción a R/Clase 2/datosOrdenados_ebola.txt", delim = "/t")
library(gganimate)
library(ggplot2)
library(gganimate)
library(gapminder)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~continent) +
labs(title = 'Año: {frame_time}', x = 'Producto Bruto Interno', y = 'Esperanza de vida') +
transition_time(year) +
ease_aes('linear')
## Clase 3 - Resumen de datos
library(readxl)
library(readxl)
girasoles <- read_excel("C:/Users/Fernando Ramos/Dropbox/Personal/Universidad Austral/Cursos/Introducción a R/Clase 3/girasoles.xlsx")
View(girasoles)
library(dplyr)
#Convierto campo factor
girasoles <- girasoles %>%
mutate(llenado = factor(llenado, levels = 1:3, labels = "Malo",
"Regular", "Bueno"))
mutate(llenado = factor(llenado, levels = 1:3, labels = c("Malo",
#Convierto campo factor
girasoles <- girasoles %>%
#Convierto campo factor
girasoles <- girasoles %>%
+
View(girasoles)
#Convierto campo factor
girasoles <- girasoles %>%
#Convierto campo factor
girasoles <- girasoles %>%
llenado = factor(llenado, levels = 1:3,
View(girasoles)
# convirto
#Convierto campo factor
girasoles <- girasoles %>%
mutate(girasoles,
llenado = factor(llenado, levels = 1:3,
labels = c("Malo", "Regular", "Bueno")))
summarise(girasoles,
Total = sum(num_hojas))
girasoles %>%
group_by(fertilizante) %>%
summarise(Total = sum(num_hojas))
girasoles %>%
group_by(fertilizante) %>%
summarise(Total = sum(num_hojas),
Altura_promedio = mean(altura))
girasoles %>%
group_by(variedad) %>%
summarise(prom_hojas_por_metro = mean(num_hojas/altura))
girasoles %>%
group_by(variedad) %>%
summarise(
prom_hojas_por_metro = mean(num_hojas/altura),
prom_hojas_por_cm = prom_hojas_por_metro / 100
)
#Convierto campo factor
girasoles <- girasoles %>%
mutate(girasoles,
llenado = factor(llenado, levels = 1:3,
labels = c("Malo", "Regular", "Bueno")))
# Para cada variedad, obtener:
#
#   la media aritmética, desvío estándar, valor mínimo, valor máximo y coeficiente de variación de la variable altura;
# la cantidad de plantas con llenado “bueno”;
# el porcentaje de plantas con diámetro de la flor mayor a 20 cm y ordenar el dataset resultante en forma descendente según este porcentaje.
girasoles %>%
group_by(variedad) %>%
summarise(
media = mean(num_hojas),
minimo = min(num_hojas),
maximo = max(num_hojas)
)
# Para cada variedad, obtener:
#
#   la media aritmética, desvío estándar, valor mínimo, valor máximo y coeficiente de variación de la variable altura;
# la cantidad de plantas con llenado “bueno”;
# el porcentaje de plantas con diámetro de la flor mayor a 20 cm y ordenar el dataset resultante en forma descendente según este porcentaje.
girasoles %>%
group_by(variedad) %>%
summarise(
media = mean(altura),
desvio = sd(altura),
minimo = min(altura),
maximo = max(altura)
)
# Para cada variedad, obtener:
#
#   la media aritmética, desvío estándar, valor mínimo, valor máximo y coeficiente de variación de la variable altura;
# la cantidad de plantas con llenado “bueno”;
# el porcentaje de plantas con diámetro de la flor mayor a 20 cm y ordenar el dataset resultante en forma descendente según este porcentaje.
girasoles %>%
group_by(variedad) %>%
summarise(
media = mean(altura),
desvio = sd(altura),
minimo = min(altura),
maximo = max(altura),
variacion = desvio/media
)
# Para cada variedad, obtener:
#
#   la media aritmética, desvío estándar, valor mínimo, valor máximo y coeficiente de variación de la variable altura;
# la cantidad de plantas con llenado “bueno”;
# el porcentaje de plantas con diámetro de la flor mayor a 20 cm y ordenar el dataset resultante en forma descendente según este porcentaje.
girasoles %>%
group_by(variedad) %>%
summarise(
media = mean(altura),
desvio = sd(altura),
minimo = min(altura),
maximo = max(altura),
variacion = desvio/abs(media) * 100
)
# Para cada variedad, obtener:
#
#   la media aritmética, desvío estándar, valor mínimo, valor máximo y coeficiente de variación de la variable altura;
# la cantidad de plantas con llenado “bueno”;
# el porcentaje de plantas con diámetro de la flor mayor a 20 cm y ordenar el dataset resultante en forma descendente según este porcentaje.
girasoles %>%
group_by(variedad) %>%
summarise(
media = mean(altura),
desvio = sd(altura),
minimo = min(altura),
maximo = max(altura),
variacion = desvio/abs(media) * 100,
buenas = sum(llenado == "Bueno")
)
# Para cada variedad, obtener:
#
#   la media aritmética, desvío estándar, valor mínimo, valor máximo y coeficiente de variación de la variable altura;
# la cantidad de plantas con llenado “bueno”;
# el porcentaje de plantas con diámetro de la flor mayor a 20 cm y ordenar el dataset resultante en forma descendente según este porcentaje.
girasoles %>%
group_by(variedad) %>%
summarise(
media = mean(altura),
desvio = sd(altura),
minimo = min(altura),
maximo = max(altura),
variacion = desvio/abs(media) * 100,
buenas = sum(llenado == "Bueno"),
porcentaje = mean(diam_flor > 20) * 100
)
# Para cada variedad, obtener:
#
#   la media aritmética, desvío estándar, valor mínimo, valor máximo y coeficiente de variación de la variable altura;
# la cantidad de plantas con llenado “bueno”;
# el porcentaje de plantas con diámetro de la flor mayor a 20 cm y ordenar el dataset resultante en forma descendente según este porcentaje.
girasoles %>%
group_by(variedad) %>%
summarise(
media = mean(altura),
desvio = sd(altura),
minimo = min(altura),
maximo = max(altura),
variacion = desvio/abs(media) * 100,
buenas = sum(llenado == "Bueno"),
porcentaje = mean(diam_flor > 20) * 100
) %>%
arrange(desc(porcentaje))
# Cálculo de frecuencias
count(girasoles,
variedad)
# Cálculo de frecuencias
count(girasoles,
variedad,
llenado)
count(girasoles,
llenado)
count(girasoles,
llenado, sort = TRUE)
count(girasoles,
fertilizante, llenado)
table(girasoles$fertilizante, girasoles$llenado)
z <- table(girasoles$fertilizante, girasoles$llenado)
prop.table(z)
100 * prop.table(z, margin = 1)
100 * prop.table(z, margin = 2)
library(janitor)
tabyl(girasoles,
llenado,
fertilizante)
girasoles %>%
tabyl(variedad, llenado) %>%
adorn_totals(c("row", "col")) %>%
adorn_percentages("row") %>%
adorn_pct_formatting(digits = 2) %>%
adorn_ns() %>%
adorn_title(placement = "combined", "Variedad", "Llenado")
#library(readr)
#library(tidyr)
library(dplyr)
library(readxl)
Mercosur <- read_excel("C:/Users/Fernando Ramos/Dropbox/Personal/Universidad Austral/Cursos/Introducción a R/Clase 4/Mercosur.xlsx")
View(Mercosur)
Suda <- read_excel("C:/Users/Fernando Ramos/Dropbox/Personal/Universidad Austral/Cursos/Introducción a R/Clase 4/Sudamerica.xlsx")
View(Suda)
library(readxl)
names(Mercosur)
names(Suda)
# Inner joins
inner_join(Mercosur, Suda)
# Inner joins
inner_join(Mercosur, Suda, by c("countrycode", "year")
# Inner joins
inner_join(Mercosur, Suda, by c("countrycode", "year"))
# Inner joins
inner_join(Mercosur, Suda, by = c("countrycode", "year"))
inner_join(Mercosur, Suda, by = c("countrycode", "year"),
suffix = c("_mer", "_sud"))
source('C:/Users/Fernando Ramos/Dropbox/Personal/Universidad Austral/Cursos/Introducción a R/Clase 4/Clase 4.R', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
ggplot(mapping = aes(x = MiVariable)) +
geom_bar(fill = "blue", bins = 10) +
theme_bw()
if (is.numeric(MiVariable)) {
ggplot(mapping = aes(x = MiVariable)) +
geom_histogram(fill = "red", color = "black", bins = 10) +
theme_bw()
} else {
ggplot(mapping = aes(x = MiVariable)) +
geom_bar(fill = "blue", bins = 10) +
theme_bw()
}
ggplot(mapping = aes(x = MiVariable)) +
geom_histogram(fill = "red", color = "black", bins = 10) +
theme_bw()
ifelse(19%%0, "Número par", "Número impar")
ifelse(19%%3, "Número par", "Número impar")
ifelse(19%%3 = 0, "Número par", "Número impar")
ifelse(19%%2 = 0, "Número par", "Número impar")
x <- 19%%2
ifelse(x = 0, "Número par", "Número impar")
ifelse(x == 0, "Número par", "Número impar")
ifelse(19%%2 == 0, "Número par", "Número impar")
x <- sample(100, 20)
ifelse(x == 0, "Número par", "Número impar")
ifelse(x%%2 == 0, "Número par", "Número impar")
# Estructuras FOR
Y <- sample(1e6, 5)
y
view y
y
for (z in 1:5) {
paste0("El", z, "° número elegido fue el ", y[z])
}
print paste0("El", z, "° número elegido fue el ", y[z])
for (z in 1:5) {
print paste0("El", z, "° número elegido fue el ", y[z])
}
for (z in 1:5) {
print( paste0("El", z, "° número elegido fue el ", y[z]))
}
for (z in 1:5) {
print( paste0("El", z, "° número elegido fue el ", y[z]))
}
# Estructuras FOR
Y <- sample(1e6, 5)
for (z in 1:5) {
print( paste0("El", z, "° número elegido fue el ", y[z]))
}
for (z in 1:5) {
print( paste0("El", z, "° número elegido fue el ", Y[z]))
}
Y
m <- matrix(sample(9), ncol = 3)
m
apply(m, 1, f=min)
apply(m, 1, FUN=min)
apply(m, 2, FUN=min)
m2 <- matrix(sample(15, ncol(3)))
m2 <- matrix(sample(15, ncol = 3))
m2 <- matrix(sample(15), ncol = 3)
lista <- list(m, m2)
lapply(lista,
FUN = colMeans()
)
lapply(lista,
FUN = colMeans
)
sapply(lista,
FUN = colSums
)
w <- x/5 + y*y
#Funciones definidas por el usuario
mifuncion <- function(x,y){
w <- x/5 + y*y
return(w)
}
mifuncion(10,4)
#Funciones definidas por el usuario
mifuncion <- function(x,y){
w <- x/5 + y^2
return(w)
}
mifuncion(10,4)
#
#
#
#
#
library(readr)
library(readr)
Daphniagrowth <- read_csv("C:/Users/Fernando Ramos/Dropbox/Personal/Universidad Austral/Cursos/Introducción a R/Clase 4/Daphniagrowth.csv")
View(Daphniagrowth)
Daphniagrowth <- read_csv("C:/Users/Fernando Ramos/Dropbox/Personal/Universidad Austral/Cursos/Introducción a R/Clase 4/Daphniagrowth.csv") %>%
mutate(parasite = factor(parasite))
library(ggplot2)
ggplot(data = Daphniagrowth, aes(x = parasite, y = growth.rate)) +
geom_boxplot())
ggplot(data = Daphniagrowth) + aes(x = parasite, y = growth.rate) +
geom_boxplot())
ggplot(data = Daphniagrowth) + aes(x = parasite, y = growth.rate) +
geom_boxplot()
# figura global de confirmados
# 2020-03-15  version actual:   2021-04-08
# GAD
###############################################
options(allow_html=TRUE)
# Bibliotecas a importar
check_packages <- function(packages) {
if (all(packages %in% rownames(installed.packages()))) {
TRUE
} else{
cat(
"Instalar los siguientes packages antes de ejecutar el presente script\n",
packages[!(packages %in% rownames(installed.packages()))],
"\n"
)
}
}
View(check_packages)
packages_needed <- c("ggplot2", "ggrepel", "plotly",
"lubridate", "htmlwidgets" , "RColorBrewer",
"sqldf", "grid", "data.table", "readr" )
View(check_packages)
check_packages(packages_needed)
library(sqldf)
library(ggplot2)
library(ggrepel)
library(plotly)
## Attaching package: 'plotly'
## The following object is masked from 'package:ggplot2':
##
##     last_plot
## The following object is masked from 'package:stats':
##
##     filter
## The following object is masked from 'package:graphics':
##
##     layout
library(lubridate)
## The following objects are masked from 'package:base':
##
##     date, intersect, setdiff, union
library(htmlwidgets)
library(RColorBrewer)
library(sqldf)
## Loading required package: gsubfn
## Loading required package: proto
## Loading required package: RSQLite
library(grid)
library(data.table)
## The following objects are masked from 'package:lubridate':
##
##     hour, isoweek, mday, minute, month, quarter, second, wday, week,
##     yday, year
library(readr)
URL <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/"
url_archivo  <- paste(URL,"time_series_covid19_confirmed_global.csv", sep = "")
COVID_19_h  <- read.csv(url_archivo, sep = ",", header = T)
COVID_19_h$Lat  <- NULL
COVID_19_h$Long <- NULL
COVID_19_h$Province.State <- NULL
View(COVID_19_h)
colnames(COVID_19_h)
library(tidyr)
COVID_19  <- COVID_19_h %>% gather(date, casos, 2:ncol(COVID_19_h))
colnames(COVID_19) <- c(  "pais", "date", "casos")
View(COVID_19)
COVID_19$date <- as.Date(as.character(COVID_19$date), format = "X%m.%d.%y")
casos_por_fecha <- COVID_19 %>% group_by(date) %>% summarise(casos = sum(casos))
View(casos_por_fecha)
# casos_por_fecha <- sqldf( "select  date, sum(casos) casos
# casos_por_fecha <- sqldf( "select  date, sum(casos) casos
#                           from COVID_19
# casos_por_fecha <- sqldf( "select  date, sum(casos) casos
#                           from COVID_19
#                           group by date")
# casos_por_fecha <- sqldf( "select  date, sum(casos) casos
#                           from COVID_19
#                           group by date")
# -- ordenamos
#library(tidyverse)
datos <- arrange(casos_por_fecha, (casos_por_fecha$date) )
View(datos)
g1 <- ggplot(datos ,aes(x = date, y = casos/1000000)) +
geom_point( size=1, color="blue") +
ggtitle("COVID_19 - Casos confirmados a nivel mundial") +
scale_x_date(date_breaks = "10 day", date_labels =  "%d %b") +
#scale_y_continuous(limits = c(0, 100), breaks = seq(1, 5, 1)) +
theme(plot.title = element_text(lineheight = 1,face ='bold'))   +
ylab("cantidad de casos en M") +
xlab("") +
labs(caption = "\nFuente: The Johns Hopkins University Center for Systems Science and Engineering (JHU CSSE)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
g1 <- ggplotly(g1, tooltip = c("casos")) %>%
layout(legend = list(
orientation = "h",
x = 0.7,
y = 1
)
)
g1
plot.ts(mob_vs_dead)
#Cargo las librerias del proyecto
library(readr)
library(ggplot2)
library(plotly)
library(tidyverse)
library(data.table)  #  para  setnames
library(tidyr)
library(sqldf)
mobility <- read_csv("applemobilitytrends.csv")
mobility$geo_type              <- as.factor(mobility$geo_type)
mobility$region                <- as.factor(mobility$region)
mobility$transportation_type   <- as.factor(mobility$transportation_type)
levels(mobility$transportation_type)
#Renombro columna region por pais
setnames(mobility,
old = c( "region" ),
new = c( "pais"))
datos_v   <- mobility %>% gather(fecha, tasa    , 7:ncol(mobility))
datos_v$fecha <- as.Date(datos_v$fecha, format = "%Y-%m-%d")
colnames(datos_v)
#  Armo sub set para Argentina
#  si queremos ver otro pais modificamos aqui
paises = "Argentina"
trans = "walking"
datos_Mob <- subset(datos_v, pais == paises & transportation_type == trans)
datos_Mob <-  select( datos_Mob, fecha, tasa)
datos_Mob$fecha <- as.Date(datos_Mob$fecha, format = "%Y-%m-%d")
URL           <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/"
URL_muertes   <- paste(URL,"time_series_covid19_deaths_global.csv", sep = "")
COVID_19_h    <- read.csv(URL_muertes, sep = ",", header = T)
################################### preparo los datos
# eliminamos  columnas no usadas
# colnames(COVID_19_h)
COVID_19_h <- select(COVID_19_h, -c("Lat", "Long", "Province.State")   )
# cambio de nombres
setnames(COVID_19_h ,
old = c( "Country.Region" ),
new = c( "pais"))
COVID_19_h$pais <- as.factor(COVID_19_h$pais)
muertes_v <-  COVID_19_h %>% gather(fecha, tasa    , 2:ncol(COVID_19_h))
muertes_v$fecha <- as.Date(muertes_v$fecha, format = "X%m.%d.%y")
colnames(muertes_v)
muertes_v <- subset(muertes_v, pais == paises)
for (i in (1:(nrow(muertes_v)-1))) {
muertes_v$muertos[i] <- muertes_v$tasa[i+1] - muertes_v$tasa[i]
}
muertes_v <-  select(muertes_v, fecha, muertos)
# Uno df de mobilidad con la de muertes
mob_vs_dead <- merge(datos_Mob, muertes_v)
#Elimino la fila 253, ya que tiene una observaciÃ³n que distorciona los grÃ¡ficos
mob_vs_dead <- mob_vs_dead[-253,]
plot.ts(mob_vs_dead)
# Uno df de mobilidad con la de muertes
mob_vs_dead <- merge(datos_Mob, muertes_v)
mobility <- read_csv("applemobilitytrends.csv")
wd
wd()
view wd()
setwd(C:\intrduc)
source("~/Austral/LI1/labo/src/xgboost/572_xgboost_histograma_default.r", echo=TRUE)
source("~/Austral/LI1/labo/src/xgboost/571_xgboost_histograma.r", echo=TRUE)
source("~/Austral/LI1/labo/src/lightgbm/512_lightgbmLoc.R", echo=TRUE)
